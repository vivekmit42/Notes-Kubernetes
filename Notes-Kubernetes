What is kubernetes?
* It is also known as K8s
* It is an open source system used for automating deployment, management of containerized apps, scaling.

What is container orchestration?
* It is a method in which a master will manage various containers roles, its states and their behaviour and operation.

What is Nodes(Minions)?
* It is a server, in which you running containerised based application.
* In this, we have different components like kube-proxy, container-runtime, kubelet.

What is Cluster?
* Group of nodes

What is Pod?
** It is Isolated environment, where we can run containers.
** It is smallest unit in K8s.
** A single instance of a running process in a cluster.
** It can run one or more containers and share the same resources.


Architecture of K8s:
In a cluster, we have Multiple nodes:
** One Master Node & Multiple Worker Nodes

MASTER NODE:
** There is one master who will manage the cluster.
** In this  node we have various components like API server, scheduler, etcd, control manager.

Different components of Master Node:
    
API SERVER:
** In master we have one API Server unit, which is responsible for communication between master and node and between different clusters.
** It a API Server want to perform any activity in the cluster, it will talks with scheduler.
                
SCHEDULER:
** It is the unit responsbile for scheduling and running pods in cluster.
** It is responsible to node to newly created Pods.

ETCD:
** It is the database of K8 system and it is in key-value store, having all cluster data

CONTROLLER MANAGER:
** It is the unit which is responsible for taking care of every component in the K8 is working as per requirement or not. 
** It is responsible for managing the state of the cluster.

Different components of Worker Node:

KUBELET:
** It is an agent, which make sure all the pods are running fine in the system.
** It will communicate with API server and further api server will communicate with controller manager, etcd, scheduler.
    
SERVICE PROXY/ KUBE PROXY:
** Pods are isolated, we can access it directly from outside.
** It is the service by which outside user can access isolated pods through apiserver and kubelet.
KUBECTL:
** It is controller tool  which is used to send commands to every component of K8 system via API Server.

CONTAINER NETWORK INTERFACE NETWORK (like WEAVE NET, CALICO. etc) :
** It is the network system which is responsible for all the communications happens between master node, worker node, clusters, pods, etc.

    
KUBE-PROXY:
** It maintains the network rules for comm with pods.

Features of K8s:
** Container Orchestration
** Scalability
** Load Balancing
** High Availablity
** Rollouts & Rollback

Installations of K8s:

Step 1. Download & Install kubectl binary with curl on Linux
# curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   138  100   138    0     0    398      0 --:--:-- --:--:-- --:--:--   398
100 54.6M  100 54.6M    0     0  2283k      0  0:00:24  0:00:24 --:--:-- 2306k

Step 2. Validate the binary (optional)
# curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   138  100   138    0     0    399      0 --:--:-- --:--:-- --:--:--   400
100    64  100    64    0     0    163      0 --:--:-- --:--:-- --:--:--   163

Step 3. Validate the kubectl binary against the checksum file:
# echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
kubectl: OK

Step 4. Install kubectl
# install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

Note:If you do not have root access on the target system, you can still install kubectl to the ~/.local/bin directory:
# chmod +x kubectl
# mkdir -p ~/.local/bin
# mv ./kubectl ~/.local/bin/kubectl

Step 5. Test to ensure the version you installed is up-to-date:
# kubectl version --client

Client Version: v1.32.1
Kustomize Version: v5.5.0

Or use this for detailed view of version:
# kubectl version --client --output=yaml
clientVersion:
  buildDate: "2025-01-15T14:40:53Z"
  compiler: gc
  gitCommit: e9c9be4007d1664e68796af02b8978640d2c1b26
  gitTreeState: clean
  gitVersion: v1.32.1
  goVersion: go1.23.4
  major: "1"
  minor: "32"
  platform: linux/amd64
kustomizeVersion: v5.5.0


Step 6. Installing minikube, Run this command To download the latest minikube stable release on x86-64 Linux using binary download:

# curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 45.2M  100 45.2M    0     0   760k      0  0:01:00  0:01:00 --:--:--  300k

Step 7. Run this command To install the latest minikube stable release on x86-64 Linux using binary download:
# sudo rpm -Uvh minikube-latest.x86_64.rpm
Preparing...                          ################################# [100%]
Updating / installing...
   1:minikube-1.35.0-0                ################################# [100%]
localhost:~ # systemctl start docker.service
localhost:~ # systemctl enable docker.service
Created symlink /etc/systemd/system/multi-user.target.wants/docker.service â†’ /usr/lib/systemd/system/docker.service.

Step 8. Start your cluster
# minikube start --force
* minikube v1.35.0 on Opensuse-Leap 15.6
! minikube skips various validations when --force is supplied; this may lead to unexpected behavior
* Automatically selected the docker driver. Other choices: ssh, none
* The "docker" driver should not be used with root privileges. If you wish to continue as root, use --force.
* If you are running minikube within a VM, consider using --driver=none:
*   https://minikube.sigs.k8s.io/docs/reference/drivers/none/
* Using Docker driver with root privileges
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.46 ...
! minikube was unable to download gcr.io/k8s-minikube/kicbase:v0.0.46, but successfully downloaded docker.io/kicbase/stable:v0.0.46@sha256:fd2d445ddcc33ebc5c6b68a17e6219ea207ce63c005095ea1525296da2d1a279 as a fallback image
* Downloading Kubernetes v1.32.0 preload ...
    > preloaded-images-k8s-v18-v1...:  333.57 MiB / 333.57 MiB  100.00% 11.99 M
* Creating docker container (CPUs=2, Memory=2200MB) ...
* Preparing Kubernetes v1.32.0 on Docker 27.4.1 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Configuring bridge CNI (Container Networking Interface) ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

Step 9. Verify whether you have started your cluster or not?
# minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured

Step 10. Interact with your cluster (access your shiny new cluster)
# kubectl get po -A
NAMESPACE     NAME                               READY   STATUS    RESTARTS      AGE
kube-system   coredns-668d6bf9bc-hkdq6           1/1     Running   0             13m
kube-system   etcd-minikube                      1/1     Running   0             13m
kube-system   kube-apiserver-minikube            1/1     Running   0             13m
kube-system   kube-controller-manager-minikube   1/1     Running   0             13m
kube-system   kube-proxy-jgztg                   1/1     Running   0             13m
kube-system   kube-scheduler-minikube            1/1     Running   0             13m
kube-system   storage-provisioner                1/1     Running   1 (13m ago)   13m

OR
Alternatively, minikube can download the appropriate version of kubectl and you should be able to use it like this:
 # minikube kubectl -- get po -A
NAMESPACE     NAME                               READY   STATUS    RESTARTS      AGE
kube-system   coredns-668d6bf9bc-hkdq6           1/1     Running   0             14m
kube-system   etcd-minikube                      1/1     Running   0             14m
kube-system   kube-apiserver-minikube            1/1     Running   0             14m
kube-system   kube-controller-manager-minikube   1/1     Running   0             14m
kube-system   kube-proxy-jgztg                   1/1     Running   0             14m
kube-system   kube-scheduler-minikube            1/1     Running   0             14m
kube-system   storage-provisioner                1/1     Running   1 (13m ago)   14m

You can also make your life easier by adding the following to your shell config: (for more details see: kubectl)
# alias kubectl="minikube kubectl --"

For additional insight into your cluster state, minikube bundles the Kubernetes Dashboard, allowing you to get easily acclimated to your new environment:

# minikube dashboard

--------------------------------------------------------------------------------------------------------------------------

How to create a new pod?

Step 1. create a pod.

# kubectl create deployment my-ngnix --image=nginx:latest
deployment.apps/my-ngnix created

Step 2. Verify your deployments.
# kubectl get deployments
NAME       READY   UP-TO-DATE   AVAILABLE   AGE
my-ngnix   0/1     1            0           21s

Step 3. Verify your running pods
# kubectl get pods
NAME                        READY   STATUS              RESTARTS   AGE
my-ngnix-5dc84b5fc7-rjf6b   0/1     ContainerCreating   0          39s


-------------------------------------------------------------------------------------------------------------------------

If you want to acces your pod thru a port

then you have to use method service object

in this we have to bind the port

# kubectl expose deployment my-ngnix --port=80 --type=LoadBalancer
service/my-ngnix exposed

Then access your pod

 # minikube service list
|----------------------|---------------------------|--------------|---------------------------|
|      NAMESPACE       |           NAME            | TARGET PORT  |            URL            |
|----------------------|---------------------------|--------------|---------------------------|
| default              | kubernetes                | No node port |                           |
| default              | my-ngnix                  |           80 | http://192.168.49.2:31942 |
| kube-system          | kube-dns                  | No node port |                           |
| kubernetes-dashboard | dashboard-metrics-scraper | No node port |                           |
| kubernetes-dashboard | kubernetes-dashboard      | No node port |                           |
|----------------------|---------------------------|--------------|---------------------------|
localhost:~ # minikube service my-ngnix
|-----------|----------|-------------|---------------------------|
| NAMESPACE |   NAME   | TARGET PORT |            URL            |
|-----------|----------|-------------|---------------------------|
| default   | my-ngnix |          80 | http://192.168.49.2:31942 |
|-----------|----------|-------------|---------------------------|
* Opening service default/my-ngnix in default browser...

Open this address in web browser

-----------------------------------------------------------------------------------------------------------------------
Work Flow of K8s

1. minikube start/delete                                        - start your cluster (minikube is single node cluster setup which uses single node for master and worker best for learning )

2. minikube status                                                  - check your cluster status
3. minikube dashboard                                               - Monitor your cluster status using Web UI
4. kubectl create deployment_name_01 my-app --image=link            - then we picked pre-defined application ngnix from docker hub, using it we hvave created 1 deployment with deployment_name_01 as its name 
5. kubectl get deployments                                          - check your deployment's state, if there is no issue then kubelet will automatically create pods for your deployment
6. kubectl get pods                                                 - check your running pod's status 
7. kubectl delete deployment my-app                                 - with this command you can delete deployment
8. kubectl expose deployment my-app --type=LoadBalancer --port=80   - to access your application from outside, bind your port with this expose command in which we created one service with name as my-app 
9. minikube service my-app                                          - to use that service use this command so that you can access your app
10. kubectl get services                                            - to check your running services

-------------------------------------------------------------------------------------------------------------------------

In Brief, Work flow of K8 Cluster:

1. Create a K8 cluster
2. Deploye an app
3. Explore your app
4. Expose your app publicly
5. Scale up your app
6. Update your app
-------------------------------------------------------------------------------------------------------------------------